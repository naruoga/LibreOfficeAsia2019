0:00:03.560,0:00:10.959
こんにちは。
最初に、このようなすばらしい場所を用意して

0:00:10.960,0:00:17.120
いただいたことに感謝します。
おかげで、私たちみんなこの場で一堂に会することができたわけですから。

0:00:17.120,0:00:21.920
私はMark Hungといいます。台湾から来ました。

0:00:21.920,0:00:39.219
私はLibreOfficeの開発者で、ここ数年でWriterとImpressの
問題、主にCJK言語に関するものに取り組んできました。

0:00:39.220,0:00:46.640
今日は、私が出会った問題についてと、

0:00:46.640,0:00:49.600
その背後にある物語について皆さんにお話ししたいと思います。

0:00:49.600,0:00:59.580
すごく技術的というわけではなくて、
みなさんに私の物語を共有したいだけなのです。

0:00:59.740,0:01:08.020
さて、LibreOfficeには、特にCJKユーザーのために

0:01:08.020,0:01:16.430
デザインされたさまざまな機能があります。
たとえばアジア言語向け組版、それによって

0:01:16.430,0:01:23.880
句読点のぶら下がりや、特定の文字を行頭、あるいは

0:01:23.880,0:01:29.220
行末に来るのを禁止することができるようにすること、

0:01:29.380,0:01:38.500
あるいはアジア言語向けカーニングや、
句読点やカナの字詰めなどが可能になります。

0:01:38.700,0:01:44.080
また、均等割り付けのルールもあります。

0:01:44.080,0:01:53.340
日本および中国のユーザーは、そのほかの言語とは
ことなる均等割り付けのルールを用いるのです。

0:01:53.520,0:01:59.360
あるいは、特定の文脈では私たちは縦書きをしたり、

0:01:59.520,0:02:08.980
「稿纸（gǎozhǐ）」または「原稿用紙」と呼ばれる
特別な用紙に文字を書いたりすることもあります。

0:02:08.980,0:02:18.880
また、ルビ（英語ではアジア向け発音ガイド）という、

0:02:18.880,0:02:24.960
表音文字に対する、読み手がその文字をどう発音するかの
マークを使います。

0:02:24.960,0:02:34.000
また、「その他の言語ツール」では、簡体字・繁体字変換や、

0:02:34.000,0:02:40.360
韓国のユーザーのためのハングル／ハンチャ変換もあります。

0:02:40.360,0:02:45.250
それから、ユーザーインタフェースには見えないけれども、

0:02:45.250,0:02:52.530
日々使うような機能もあります。

0:02:52.530,0:02:58.940
入力メソッドの対応、欧文・アジア言語の混植、

0:02:58.940,0:03:07.480
IVS（異体字セレクタ）のような特殊な文字のサポート,

0:03:07.480,0:03:12.360
BMP（基本多言語面）外のUnicode文字のサポート、
といったものです。

0:03:12.360,0:03:24.070
これらの機能は特にCJKユーザーのために設計されているので、
言い換えれば、

0:03:24.070,0:03:34.420
ほかの言語のユーザー、とりわけ欧米の方たちには

0:03:34.420,0:03:41.800
これらの機能がどのように使われ、
どのように動作するべきなのかを理解するのは

0:03:41.800,0:03:49.640
むずかしいため、
ときどき長い期間機能が巻き戻ってしまうこともあるのです。

0:03:49.640,0:03:53.920
さあ、ではすべての始まりはどうだったのか。

0:03:53.920,0:04:02.400
私がLibreOfficeと関わるようになった物語を
皆さんに共有したいと思います。

0:04:02.400,0:04:12.070
遡ること2014年、
私は、だいたい600台ぐらいのコンピューター、

0:04:12.070,0:04:21.440
400人ぐらいの従業員がいる組織で働いていました。
私の組織はオフィスソフトの移行という責務を持ち、

0:04:21.440,0:04:29.930
私は、そのときはOpenOfficeの導入の促進のために、

0:04:29.930,0:04:39.820
オフィスソフトの移行を促進、または改善するために
働いていたのですが、

0:04:39.820,0:04:50.320
そのとき、エンドユーザーから寄せられるいくつかの
典型的な質問がありました。

0:04:50.320,0:04:56.150
例えば、本当に何度となく聞かれた質問は、

0:04:56.150,0:05:03.500
なんで、DOCX, DOC, RTFといった
Microsoftのファイル形式のなかの、

0:05:03.500,0:05:11.720
番号付き箇条書きで使われている中国語の数詞が、
アラビア数字になってしまうのはなぜか、とか、

0:05:11.720,0:05:16.520
句読点がすごく直前の文字にくっついてしまうのはなぜ、

0:05:16.520,0:05:25.400
句読点が印刷領域の外にはみ出してしまうのはなぜ、
なんで私の文書のフォーマットが壊れてしまうのか、といったものです。

0:05:25.400,0:05:31.910
そこで、私たちはこのような問いに対して、
いくつか解答例を用意していました。例えば、

0:05:31.910,0:05:41.690
中国語数詞を使う箇条書きスタイルを作り、

0:05:41.690,0:05:48.979
それを適用した後、ODFフォーマットで保存しなさい、
そうでなければ、またファイルを開きなおしたら、

0:05:48.979,0:05:55.440
元通りにアラビア数字になってしまいますよ、
なんてことをユーザーに教えなければならなかったのです。

0:05:55.440,0:06:04.530
もちろん、ODF形式で保存するようにすることは
まったく間違ってはおらず、

0:06:04.530,0:06:10.380
私は正しい行いだとは思うのですが、
一方でちょっとばかり重荷ではありました。

0:06:10.380,0:06:18.520
私の視点では、箇条書きスタイルを作る、
というのは、かなり応用的な使い方だからです。

0:06:18.520,0:06:30.980
フォーマットの崩れの問題については、
ユーザーにいくつかのCJK機能をオフにするように

0:06:30.980,0:06:41.280
頼む必要がありました。たとえば句読点の字詰め、
行数と文字数の指定といった機能です。

0:06:41.280,0:06:47.600
これらのCJK機能は、私たちにとっては
道路の置石のように取り除くべきものだったのです。

0:06:47.600,0:06:57.150
ところが、ある日私の同僚が、

0:06:57.150,0:07:04.260
簡体字中国語の文書なら、
中国語の番号付き箇条書きが

0:07:04.260,0:07:10.950
完璧に扱えるよ、ということを教えてくれました。

0:07:10.950,0:07:18.600
これはとても奇妙なことに思えました。

0:07:18.600,0:07:26.610
Microsoft Office形式の番号付き箇条書きは

0:07:26.610,0:07:33.060
簡体字中国語なら表示できるのに、
繁体字中国語では表示できないというのはおかしいです。

0:07:33.060,0:07:39.020
なぜなら若い数詞、一、二、三、四、五、六、七……は、
どっちも同じ文字だからです。

0:07:39.020,0:07:50.500
これはとても示唆的で、私の考えでは、
こいつはとってもとっても簡単に直せそうなたぐいの問題だぞと。

0:07:50.500,0:08:01.650
そこで、ある夏の日、あるドキュメントに対しての作業が
とても不安でストレスたっぷりで、

0:08:01.650,0:08:06.949
もうオフィスを出ようと思ったとき、

0:08:06.949,0:08:15.319
なんでこのドキュメントの中を覗いてみないんだ、

0:08:15.319,0:08:23.229
という気持ちになって、ドキュメントをUNZIPしてみました。
ご存じだとは思いますが、DOCXはたくさんのXMLファイルを

0:08:23.229,0:08:31.879
ZIP圧縮したもので、XMLはテキストなのですから、

0:08:31.879,0:08:36.039
どんなテキストエディタでも中をのぞくことが
できるのです。

0:08:36.039,0:08:45.360
それで、ドキュメント内に関係するキーワードが
ないか探してみたのです。

0:08:45.360,0:08:54.640
それで、ここに書いてる taiwaneseCountingThousand

0:08:54.640,0:08:59.240
または chineseCountingThousand というのが
なんだか覚えていませんが、

0:08:59.240,0:09:05.660
とにかく純然たるテキストだったので、
これこそが求めているものだ、と、簡単に認識できたのです。

0:09:05.660,0:09:14.990
そこで、キーワードをググって、
ソースを検索して、パッチを作り、

0:09:14.990,0:09:27.580
Apache OpenOfficeに投稿したのです。
これが2014年の8月のことです。

0:09:27.580,0:09:36.200
しかし、私のパッチがレビューされるのを
待つこと3か月、

0:09:36.220,0:09:42.180
そうだ、このパッチをLibreOfficeのgerritに
投稿してみようと決めました。

0:09:42.180,0:09:52.220
驚いたことに、このパッチはたった１日でレビューされ、
それからマージされたんです。

0:09:52.220,0:10:01.020
ところでレビューしてくれたのはMiklosなんですが、
とにかく数日のうちにパッチはマージされました。

0:10:01.020,0:10:11.080
これを同僚に話して、
私たちはとても興奮しました。

0:10:11.080,0:10:16.080
それで、翌年からLibreOfficeへ移ることになったのです。

0:10:16.080,0:10:23.130
どんな文書でも必ず番号付き箇条書きはあるものなので、
この問題は私たちの扱う文書ではしょっちゅう出ていたので、

0:10:23.130,0:10:32.940
この問題が解決されたことでサポートの苦痛は
大幅に削減されたのです。

0:10:32.940,0:10:39.700
これ以降、私はLibreOfficeへの貢献を
継続的に行うようになりました。

0:10:39.700,0:10:50.400
最初は番号付き箇条書きから初めて、

0:10:50.400,0:10:59.570
それをさまざまなファイル形式で直して、
関係する不具合、例えば下線とか文字とか、

0:10:59.570,0:11:08.100
その他関連するキーワードについてのもの、
それから仕事で見つけたような問題に取り組んで、

0:11:08.100,0:11:16.350
そのあとはCJK問題リストを見るようになり、

0:11:16.350,0:11:31.260
それによって興味の範囲がどんどん広がって、
などなど、という感じです。

0:11:31.260,0:11:38.880
では、いくつか面白いCJK問題についてみていきましょう。

0:11:38.880,0:11:47.500
当時、さきほどお話ししたように、
ユーザーからのもっともよくある質問は、

0:11:47.500,0:11:52.620
なんで句読点が直前の文字にぴったりくっついてしまうんだというものでした。

0:11:52.620,0:11:59.980
どなたか、原因が想像できるかたいますか？

0:11:59.980,0:12:10.030
そうですね、
これは繁体字中国語ユーザー特有の問題で、

0:12:10.030,0:12:15.970
字詰めがよくないことに、句読点の直前の文字が

0:12:15.970,0:12:23.870
句読点、たとえば「、」や「。」や「・」などを
引っ張ってしまうというものです。

0:12:23.870,0:12:26.560
なので文字が重なってしまう。

0:12:26.560,0:12:29.140
なんでこんなことが起こるんでしょう？

0:12:29.140,0:12:39.313
それは、日本語の場合、読点（、）と句点（。）は
前の文字とぴったりくっつくようにデザインされているので、

0:12:39.313,0:12:49.070
1/3ぐらい文字を重ねても、皆さんは影響がないからです。

0:12:49.070,0:12:54.410
でも中国語、とくに繫体字中国語のユーザーにとっては、
私たちの句読点は升目の中央にあるので、

0:12:54.410,0:13:01.520
単に文字が連続してつながっていると信じていると、

0:13:01.520,0:13:07.600
こんなふうにくっついてしまうのです。

0:13:07.600,0:13:15.020
私たちが「CJK機能」といった場合、それは実際には
日本の組版規則のためにデザインされている、

0:13:15.020,0:13:19.860
ということを理解するにはしばらく時間がかかりました。

0:13:19.860,0:13:22.940
これはとても興味深いと感じます。

0:13:22.940,0:13:31.970
ぶら下げ句読点の問題に取り組んでいるときも
似たようなことが起こりました。

0:13:31.970,0:13:44.430
このテキストの例を見ると、ぶら下げ句読点が

0:13:44.430,0:13:52.020
選択範囲のとても離れたところにありますが、

0:13:52.020,0:14:00.990
これは日本語の文字組の規則では、
句読点は直前のテキストともっと近くにあるので、

0:14:00.990,0:14:07.890
繫体字中国語のユーザーにとってはずっとおかしく
見えてしまうのです。それはともかく、私は

0:14:07.890,0:14:14.730
CJK問題で見つけられることをすべて突き止めようとして、

0:14:14.730,0:14:24.020
それにより、ぶら下げ句読点を持つ文字列を
もっと正しくなる解決策を生み出そうとしたのです。

0:14:24.020,0:14:34.860
そのあと、CJKメタ問題を見るようになってから、

0:14:34.860,0:14:40.020
自分では使わない類の問題を解決してみようと思いました。
それがルビです。

0:14:40.020,0:14:48.120
私の考えでは、これが出来たら日本のユーザーには

0:14:48.120,0:14:58.140
便利になるだろうし、今は不便に違いないと思いました。
今では DOCX、DOC形式のルビサポートは

0:14:58.140,0:15:01.200
より堅牢になりました。

0:15:01.200,0:15:06.780
それから、普通でない文字が存在する場合、

0:15:06.780,0:15:12.860
均等割り付けの結果がおかしくなる問題、

0:15:12.860,0:15:23.550
また下線や取り消し線が、

0:15:23.550,0:15:32.690
ページの外にはみ出してしまうという、
奇妙な問題を解決しました。

0:15:32.690,0:15:44.140
また、囲み線や下線をより正確になるようにもしました。

0:15:44.140,0:15:54.720
それから、前のスライドでも説明したように、
2014年の時点で、

0:15:54.720,0:16:03.269
いくつか典型的な質問があるといいました。

0:16:03.269,0:16:11.519
その中の一つがレイアウトが壊れてしまうというもので、
私たちはページスタイルの「行数と文字数の指定」を

0:16:11.519,0:16:20.490
オフにするようにと言ってきました。
それはなぜかというと、

0:16:20.490,0:16:26.100
「行数と文字数の指定」をオンにすると
数々の奇妙な現象が起き、2014年の時点では

0:16:26.100,0:16:34.000
それはしばしばMicrosoft DOCX形式か
DOC形式化からの文書で起こっていたのですが、

0:16:34.200,0:16:41.420
それが毎度起こるものなのか、
そうでないのかはわからなかったのです。

0:16:41.430,0:16:51.509
レイアウトが壊れた文書というのはとてもたくさんありました。
なので、2017年、この機能についての

0:16:51.509,0:16:57.990
すべての設定を合わせて指定してテストを行って、

0:16:57.990,0:17:05.180
起きた問題を可能な限り修正してみようと決めました。

0:17:05.180,0:17:13.360
みなさんも同じだったと思いますが、英語と中国語が
混じったときに空のセルが挿入されたり、

0:17:13.360,0:17:22.340
番号付き箇条書きで空行が挿入されたりしました。

0:17:22.340,0:17:33.140
あるいは、特定の状況で、文字と文字の間が詰まりすぎて
間違っているように見えたり。

0:17:33.140,0:17:38.460
これは明らかに正しくないですね。

0:17:38.460,0:17:45.460
Microsoft OfficeとLibreOfficeを並べて対比して、
小さな違いも見つけようとしました。

0:17:45.460,0:17:58.320
この部分を自分の新しいプロジェクトにしようと決め、
確かローマのカンファレンスで発表しました。

0:17:58.320,0:18:08.730
これがすべてちゃんと動くようになったと
思ったあと、

0:18:08.730,0:18:19.340
その翌年にではなにをやろうか、
思いつかなかったのですが、

0:18:19.370,0:18:27.210
榎さんがローマで話していた問題を
思い出しました。

0:18:27.210,0:18:39.020
翌年、翌年の頭に、これを直してみようと思ったのです。

0:18:39.020,0:18:46.120
それから、この年には私にとっては
進行中の大きなプロジェクトがありました。

0:18:46.120,0:19:02.060
日本のユーザーにとっては、ルビは文字の上か下につくものです。

0:19:02.060,0:19:09.420
しかし台湾の簡体字中国語ユーザーにとっては、

0:19:09.420,0:19:21.000
左から右への横書きの場合、

0:19:21.000,0:19:27.440
元の文字の右側に上から下の縦書きで
ルビを振るのです。

0:19:27.440,0:19:38.180
これは、小学校１年から２年の子どもに、

0:19:38.180,0:19:44.540
文字の読み方を教えるために使います。

0:19:44.540,0:19:56.009
だからこれをやったのです。
始めたのは、2016年だったと思います。

0:19:56.009,0:20:04.019
はじめたときは、私の娘はまだ幼稚園に
いたので、私は締め切りを設定しました。

0:20:04.019,0:20:10.529
彼女が学校で文字を学び始める前に

0:20:10.529,0:20:17.279
終えられたらいいと思ったのです。
でも失敗しました（笑）。締め切りを守れなかったのです。

0:20:17.279,0:20:23.070
でも私は幸せです。もしあなたが学校の先生だとしたら、

0:20:23.070,0:20:32.340
あるいは私の妻がなにか娘のために書こうとしたとき、

0:20:32.340,0:20:39.500
それができるのはMicrosoft Officeだけだったのですが、

0:20:39.500,0:20:45.500
いまや私たちなりのやりかたでルビを振れる

0:20:45.520,0:20:55.320
別のソフトウェアが、
オープンソースソフトウェアで存在するのです。

0:20:55.320,0:21:00.050
さて2018年になって、
テキストレイアウトとRubyダイアログの

0:21:00.050,0:21:09.460
更新を計画しました。
ルビの縦書きのための選択肢を追加するためです。

0:21:09.460,0:21:14.320
また異なる種類のファイルフォーマットも
サポートしました。

0:21:14.320,0:21:20.690
また、これは実際には異なるバグだったのですが、
声調記号の位置について、

0:21:20.690,0:21:31.070
これらの記号は注音記号と呼ばれるのですが、

0:21:31.070,0:21:40.310
注音記号として書かれるときには別の位置に
書かれるべきなのです。そこでこの機能を実装し、

0:21:40.310,0:21:48.440
台湾のBut Koによってデザインされた
"Bopomofo GPOS Regular" という特別なフォントでテストしました。

0:21:48.440,0:21:57.440
そして残念なことに、フォントも進化していて

0:21:57.440,0:22:03.800
たまたまSource Hansに対して
注音記号の位置機能が追加されて、

0:22:03.800,0:22:16.840
何かが変更されたために、
LibreOfficeとの互換性がなくなってしまいました。残念です。

0:22:16.840,0:22:19.880
次は何が？

0:22:19.880,0:22:35.320
まだCJKメタリストには90個ほど登録されています。
私たちができることはちょっとばかりたくさんあるということです。

0:22:35.320,0:22:41.827
たとえば、Calcのルビ機能に取り組んでみたいと考えています。

0:22:41.827,0:22:48.900
基本的な考え方は、
まずはWriterと同じような属性を追加し、

0:22:48.900,0:22:55.120
それから、Writerのルビダイアログが流用できて、

0:22:55.120,0:23:01.000
Excel形式のインポート・エクスポートを試して、

0:23:01.000,0:23:04.740
画面に表示できるようにする。

0:23:04.740,0:23:13.360
最後にODFに属性かプロパティを開発すれば、

0:23:13.360,0:23:17.140
読み書きできるようになります。

0:23:17.140,0:23:22.510
それ以外にも、私が面白いと思う

0:23:22.510,0:23:30.540
アイディアはたくさんあります。
ルビを使いやすくしようという一連のものです。

0:23:30.540,0:23:38.560
たとえば、今はルビを振りたい文字を分割して
指定してあげる必要がありますが、

0:23:38.560,0:23:46.360
これは間違えたときに修正が大変です。

0:23:46.360,0:23:56.380
それから台湾のユーザーは、
注音記号には「モノルビ」を使います。

0:23:56.380,0:24:01.840
それから、ルビの編集をもっと簡単に

0:24:01.840,0:24:06.140
できるようにとか、検索・置換といった
リクエストもあります。

0:24:06.140,0:24:13.920
そしてCalcとImpressはルビをサポートしていません。

0:24:13.920,0:24:25.600
小笠原さんと議論した結果、
Calcサポートがより重要だとのことでした。

0:24:25.600,0:24:31.800
世の中には表計算ドキュメントが多数あるからです。

0:24:31.800,0:24:40.480
それから、禁則処理の問題については
見てみようと試みたのですが、

0:24:40.480,0:24:47.760
扱うには時間が足りませんでした。
たぶんすべて似たような理由なので、

0:24:47.760,0:24:57.860
これらに取り組むのは次の研究課題として
面白いかもしれません。

0:24:57.860,0:25:01.640
そして、縦書きの問題があります。

0:25:01.640,0:25:11.620
縦書きの問題については、
今日のプレゼンではなにも触れませんでした。

0:25:11.620,0:25:20.940
直そうとしたのですが、うまくやれなかったのです。
なぜなら、過去に何度か直したのですが、

0:25:20.940,0:25:27.560
そうは思えないでしょう、なぜなら、
開発者たちはHarfBuzzという統合テキストレンダリング

0:25:27.560,0:25:35.280
エンジンを導入して、この機能を壊してしまったからです。
ほかの開発者がまた直したのですが、

0:25:35.280,0:25:43.320
そのために助けもしましたが。
LinuxとWindowsでは再びちゃんと動くように

0:25:43.320,0:25:50.160
なりましたが、Macではずっと間違っています。

0:25:50.160,0:25:56.600
なぜかというと私がMacを持ってないからです。
なにが問題化を見ることすらできません。

0:25:56.600,0:26:04.110
私の意見としては、統合テキストレイアウトは横書きでは
一般に正しかったとしても、

0:26:04.110,0:26:13.520
縦書きについて正しいと保証することは
私にはできません。

0:26:13.520,0:26:20.820
ここは議論すべきところだと思います。

0:26:20.820,0:26:26.140
さて、次は？
もしあなたがまだこういう修正に興味があるなら、

0:26:26.150,0:26:32.780
ぜひ参加しましょう。
明日のLibreOffice HackFestに参加してください。

0:26:32.780,0:26:35.900
ありがとうございました。

